#lang sicp

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))
(define (clear! cell) (set-car! cell false))
(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

; a
(define (make-semaphore n)
  (let ((count 0)
        (mutex (make-mutex)))
    (define (dispatch m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (if (< count n)
                 (begin (set! count (+ count 1))
                        (mutex 'release))
                 (begin (mutex 'release) (dispatch 'acquire))))
            ((eq? m 'release)
             (mutex 'acquire)
             (set! count (- count 1))
             (mutex 'release))))
    dispatch))

; b
(define (make-semaphore-2 n)
  (let ((count 0))
    (define (test-and-set!)
      (if (< count n)
          true
          (begin (set! count (+ count 1))
                 false)))
    (define (clear!)
      (if (> count 0)
          (set! count (- count 1))))
    (define (dispatch m)
      (cond ((eq? m 'acquire)
             (if (test-and-set!)
                 (dispatch 'acquire)))
            ((eq? m 'release) (clear!))))
    dispatch))
